// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model linked to Supabase Auth
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  avatar        String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  // Foreign key to Supabase Auth (will be managed by Supabase)
  authId        String    @unique @map("auth_id")
  
  // Relations
  preferences   UserPreference?
  subscription  Subscription?
  alerts        Alert[]
  recommendations Recommendation[] @relation("UserRecommendations")
  
  // Future relations for saved recommendations, etc.
  savedRecommendations Recommendation[] @relation("SavedRecommendations")

  @@map("users")
}

// User preferences
model UserPreference {
  id                String   @id @default(uuid())
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  // Theme preference
  theme             String   @default("light") // "light" or "dark"
  
  // Trading preferences
  tradingStyle      String?  @map("trading_style") // "day", "swing", "position", etc.
  riskTolerance     String?  @map("risk_tolerance") // "low", "medium", "high"
  
  // Asset preferences (JSON for flexibility)
  assetPreferences  Json?    @map("asset_preferences") // Store preferred assets and weights
  
  // Alert preferences
  alertFrequency    String?  @map("alert_frequency") // "high", "medium", "low"
  priceAlerts       Boolean  @default(true) @map("price_alerts")
  newsAlerts        Boolean  @default(true) @map("news_alerts")
  
  // Notification settings
  emailNotifications Boolean  @default(true) @map("email_notifications")
  pushNotifications  Boolean  @default(false) @map("push_notifications")
  
  // Relation to user
  userId           String    @unique @map("user_id")
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

// Subscription information
model Subscription {
  id              String    @id @default(uuid())
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  
  // Subscription details
  plan            String    // "free", "basic", "pro"
  status          String    // "active", "canceled", "expired", "trial"
  startDate       DateTime  @map("start_date")
  endDate         DateTime? @map("end_date")
  
  // Payment details
  stripeCustomerId String?   @map("stripe_customer_id")
  stripeSubscriptionId String? @map("stripe_subscription_id")
  
  // Features access (JSON for flexibility)
  features        Json?
  
  // Relation to user
  userId          String    @unique @map("user_id")
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

// Trading recommendations
model Recommendation {
  id              String    @id @default(uuid())
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  
  // Recommendation details
  asset           String    // "GOLD", "EUR/USD", etc.
  type            String    // "BUY", "SELL", "HOLD"
  confidence      Float     // 0.0 to 1.0
  
  // Analysis details
  reasoning       String    @db.Text
  sourceSummary   String?   @map("source_summary") @db.Text
  sourceData      Json?     @map("source_data")
  
  // Timing info
  validFrom       DateTime  @map("valid_from")
  validTo         DateTime? @map("valid_to")
  
  // Performance tracking
  actualMovement  String?   @map("actual_movement") // "UP", "DOWN", "FLAT"
  accuracy        Float?    // Calculated accuracy of the recommendation
  
  // Creator relation (system-generated)
  userId          String    @map("user_id") // System user who generated it
  user            User      @relation("UserRecommendations", fields: [userId], references: [id])
  
  // Users who saved this recommendation
  savedByUsers    User[]    @relation("SavedRecommendations")
  
  // Related alerts
  alerts          Alert[]

  @@map("recommendations")
}

// Alerts for price points, news events, etc.
model Alert {
  id              String    @id @default(uuid())
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  
  // Alert details
  name            String
  type            String    // "PRICE", "NEWS", "RECOMMENDATION"
  asset           String    // "GOLD", "EUR/USD", etc.
  condition       String    // ">", "<", "=", "CONTAINS", etc.
  value           String    // Price value or keyword
  
  // Alert status
  isActive        Boolean   @default(true) @map("is_active")
  isTriggered     Boolean   @default(false) @map("is_triggered")
  triggeredAt     DateTime? @map("triggered_at")
  
  // Notification method
  notifyEmail     Boolean   @default(true) @map("notify_email")
  notifyPush      Boolean   @default(false) @map("notify_push")
  notifyInApp     Boolean   @default(true) @map("notify_in_app")
  
  // Relations
  userId          String    @map("user_id")
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Optional relation to a recommendation
  recommendationId String?  @map("recommendation_id")
  recommendation  Recommendation? @relation(fields: [recommendationId], references: [id], onDelete: SetNull)

  @@map("alerts")
}
